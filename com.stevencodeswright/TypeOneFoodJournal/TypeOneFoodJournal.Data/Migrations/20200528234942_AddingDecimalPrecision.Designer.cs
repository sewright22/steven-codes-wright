// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TypeOneFoodJournal.Data;

namespace TypeOneFoodJournal.Data.Migrations
{
    [DbContext(typeof(FoodJournalContext))]
    [Migration("20200528234942_AddingDecimalPrecision")]
    partial class AddingDecimalPrecision
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TypeOneFoodJournal.Entities.Dose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Extended")
                        .HasColumnType("int");

                    b.Property<decimal>("InsulinAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TimeExtended")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TimeOffset")
                        .HasColumnType("int");

                    b.Property<int>("UpFront")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Doses");
                });

            modelBuilder.Entity("TypeOneFoodJournal.Entities.JournalEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Logged")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("JournalEntries");
                });

            modelBuilder.Entity("TypeOneFoodJournal.Entities.JournalEntryDose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DoseId")
                        .HasColumnType("int");

                    b.Property<int>("JournalEntryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoseId");

                    b.HasIndex("JournalEntryId");

                    b.ToTable("JournalEntryDoses");
                });

            modelBuilder.Entity("TypeOneFoodJournal.Entities.JournalEntryNutritionalInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("JournalEntryId")
                        .HasColumnType("int");

                    b.Property<int>("NutritionalInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JournalEntryId");

                    b.HasIndex("NutritionalInfoId");

                    b.ToTable("JournalEntryNutritionalInfos");
                });

            modelBuilder.Entity("TypeOneFoodJournal.Entities.JournalEntryTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("JournalEntryId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JournalEntryId");

                    b.HasIndex("TagId");

                    b.ToTable("JournalEntryTags");
                });

            modelBuilder.Entity("TypeOneFoodJournal.Entities.NutritionalInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<int>("Carbohydrates")
                        .HasColumnType("int");

                    b.Property<int>("Protein")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NutritionalInfos");
                });

            modelBuilder.Entity("TypeOneFoodJournal.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TypeOneFoodJournal.Entities.JournalEntryDose", b =>
                {
                    b.HasOne("TypeOneFoodJournal.Entities.Dose", "Dose")
                        .WithMany()
                        .HasForeignKey("DoseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypeOneFoodJournal.Entities.JournalEntry", "JournalEntry")
                        .WithMany("JournalEntryDoses")
                        .HasForeignKey("JournalEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypeOneFoodJournal.Entities.JournalEntryNutritionalInfo", b =>
                {
                    b.HasOne("TypeOneFoodJournal.Entities.JournalEntry", "JournalEntry")
                        .WithMany("JournalEntryNutritionalInfos")
                        .HasForeignKey("JournalEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypeOneFoodJournal.Entities.NutritionalInfo", "NutritionalInfo")
                        .WithMany()
                        .HasForeignKey("NutritionalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypeOneFoodJournal.Entities.JournalEntryTag", b =>
                {
                    b.HasOne("TypeOneFoodJournal.Entities.JournalEntry", "JournalEntry")
                        .WithMany("JournalEntryTags")
                        .HasForeignKey("JournalEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypeOneFoodJournal.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
