// <auto-generated />
using System;
using AmerFamilyPlayoffs.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AmerFamilyPlayoffs.Data.Migrations
{
    [DbContext(typeof(AmerFamilyPlayoffContext))]
    partial class AmerFamilyPlayoffContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.Bracket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PlayoffId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayoffId");

                    b.ToTable("Brackets");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.BracketPrediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PlayoffId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlayoffId");

                    b.HasIndex("UserId");

                    b.ToTable("BracketPredictions");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.Conference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.Matchup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AwayTeamId")
                        .HasColumnType("integer");

                    b.Property<int?>("HomeTeamId")
                        .HasColumnType("integer");

                    b.Property<int?>("WinningTeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("WinningTeamId");

                    b.ToTable("Matchups");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.MatchupPrediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BracketPredictionId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayoffRoundId")
                        .HasColumnType("integer");

                    b.Property<int?>("PredictedWinnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BracketPredictionId");

                    b.HasIndex("PlayoffRoundId");

                    b.HasIndex("PredictedWinnerId");

                    b.ToTable("MatchupPrediction");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.Playoff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId")
                        .IsUnique();

                    b.ToTable("Playoffs");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.PlayoffRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PlayoffId")
                        .HasColumnType("integer");

                    b.Property<int>("PointValue")
                        .HasColumnType("integer");

                    b.Property<int>("RoundId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayoffId");

                    b.HasIndex("RoundId");

                    b.ToTable("PlayoffRounds");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.PlayoffTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PlayoffId")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonTeamId")
                        .HasColumnType("integer");

                    b.Property<int>("Seed")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayoffId");

                    b.HasIndex("SeasonTeamId")
                        .IsUnique();

                    b.ToTable("PlayoffTeams");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.RoundWinner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PlayoffRoundId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayoffTeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayoffRoundId");

                    b.HasIndex("PlayoffTeamId");

                    b.ToTable("RoundWinners");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Year")
                        .IsUnique();

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.SeasonTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConferenceId")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("SeasonTeams");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.Bracket", b =>
                {
                    b.HasOne("AmerFamilyPlayoffs.Data.Playoff", "Playoff")
                        .WithMany()
                        .HasForeignKey("PlayoffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playoff");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.BracketPrediction", b =>
                {
                    b.HasOne("AmerFamilyPlayoffs.Data.Playoff", "Playoff")
                        .WithMany()
                        .HasForeignKey("PlayoffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmerFamilyPlayoffs.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Playoff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.Matchup", b =>
                {
                    b.HasOne("AmerFamilyPlayoffs.Data.PlayoffTeam", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId");

                    b.HasOne("AmerFamilyPlayoffs.Data.PlayoffTeam", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId");

                    b.HasOne("AmerFamilyPlayoffs.Data.PlayoffTeam", "WinningTeam")
                        .WithMany()
                        .HasForeignKey("WinningTeamId");

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("WinningTeam");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.MatchupPrediction", b =>
                {
                    b.HasOne("AmerFamilyPlayoffs.Data.BracketPrediction", null)
                        .WithMany("MatchupPredictions")
                        .HasForeignKey("BracketPredictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmerFamilyPlayoffs.Data.PlayoffRound", "PlayoffRound")
                        .WithMany()
                        .HasForeignKey("PlayoffRoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmerFamilyPlayoffs.Data.PlayoffTeam", "PredictedWinner")
                        .WithMany()
                        .HasForeignKey("PredictedWinnerId");

                    b.Navigation("PlayoffRound");

                    b.Navigation("PredictedWinner");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.Playoff", b =>
                {
                    b.HasOne("AmerFamilyPlayoffs.Data.Season", "Season")
                        .WithOne("Playoff")
                        .HasForeignKey("AmerFamilyPlayoffs.Data.Playoff", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.PlayoffRound", b =>
                {
                    b.HasOne("AmerFamilyPlayoffs.Data.Playoff", "Playoff")
                        .WithMany("PlayoffRounds")
                        .HasForeignKey("PlayoffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmerFamilyPlayoffs.Data.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playoff");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.PlayoffTeam", b =>
                {
                    b.HasOne("AmerFamilyPlayoffs.Data.Playoff", "Playoff")
                        .WithMany("PlayoffTeams")
                        .HasForeignKey("PlayoffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmerFamilyPlayoffs.Data.SeasonTeam", "SeasonTeam")
                        .WithOne("PlayoffTeam")
                        .HasForeignKey("AmerFamilyPlayoffs.Data.PlayoffTeam", "SeasonTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playoff");

                    b.Navigation("SeasonTeam");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.RoundWinner", b =>
                {
                    b.HasOne("AmerFamilyPlayoffs.Data.PlayoffRound", "PlayoffRound")
                        .WithMany("RoundWinners")
                        .HasForeignKey("PlayoffRoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmerFamilyPlayoffs.Data.PlayoffTeam", "PlayoffTeam")
                        .WithMany()
                        .HasForeignKey("PlayoffTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayoffRound");

                    b.Navigation("PlayoffTeam");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.SeasonTeam", b =>
                {
                    b.HasOne("AmerFamilyPlayoffs.Data.Conference", "Conference")
                        .WithMany("SeasonTeams")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmerFamilyPlayoffs.Data.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmerFamilyPlayoffs.Data.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conference");

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AmerFamilyPlayoffs.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AmerFamilyPlayoffs.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmerFamilyPlayoffs.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AmerFamilyPlayoffs.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.BracketPrediction", b =>
                {
                    b.Navigation("MatchupPredictions");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.Conference", b =>
                {
                    b.Navigation("SeasonTeams");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.Playoff", b =>
                {
                    b.Navigation("PlayoffRounds");

                    b.Navigation("PlayoffTeams");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.PlayoffRound", b =>
                {
                    b.Navigation("RoundWinners");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.Season", b =>
                {
                    b.Navigation("Playoff");
                });

            modelBuilder.Entity("AmerFamilyPlayoffs.Data.SeasonTeam", b =>
                {
                    b.Navigation("PlayoffTeam");
                });
#pragma warning restore 612, 618
        }
    }
}
